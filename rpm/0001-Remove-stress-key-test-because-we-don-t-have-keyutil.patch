From 20d4f4b3986ba9a2d72823eea24d141d3e5400d5 Mon Sep 17 00:00:00 2001
From: Matti Kosola <matti.kosola@jolla.com>
Date: Wed, 19 Aug 2015 14:00:16 +0300
Subject: [PATCH] Remove stress-key test because we don't have keyutils

Signed-off-by: Matti Kosola <matti.kosola@jolla.com>
---
 Makefile     |   1 -
 stress-key.c | 157 -----------------------------------------------------------
 stress-ng.h  |   5 --
 3 files changed, 163 deletions(-)
 delete mode 100644 stress-key.c

diff --git a/Makefile b/Makefile
index 4fe6ca5..c8f9140 100644
--- a/Makefile
+++ b/Makefile
@@ -61,7 +61,6 @@ SRC =   stress-affinity.c \
 	stress-iosync.c \
 	stress-itimer.c \
 	stress-kcmp.c \
-	stress-key.c \
 	stress-kill.c \
 	stress-lease.c \
 	stress-lsearch.c \
diff --git a/stress-key.c b/stress-key.c
deleted file mode 100644
index f0e11e6..0000000
--- a/stress-key.c
+++ /dev/null
@@ -1,157 +0,0 @@
-/*
- * Copyright (C) 2013-2015 Canonical, Ltd.
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License
- * as published by the Free Software Foundation; either version 2
- * of the License, or (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
- *
- * This code is a complete clean re-write of the stress tool by
- * Colin Ian King <colin.king@canonical.com> and attempts to be
- * backwardly compatible with the stress tool by Amos Waterland
- * <apw@rossby.metr.ou.edu> but has more stress tests and more
- * functionality.
- *
- */
-#define _GNU_SOURCE
-
-#include "stress-ng.h"
-
-#if defined(STRESS_KEY)
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <stdint.h>
-#include <string.h>
-#include <unistd.h>
-#include <keyutils.h>
-#include <stdarg.h>
-
-#define MAX_KEYS 	(256)
-
-#if 0
-#define sys_keyctl(cmd, ...) \
-	syscall(__NR_keyctl, cmd, ##__VA_ARGS__)
-#define sys_add_key(type, description, payload, plen, keyring) \
-	syscall(__NR_add_key, type, description, payload, plen, keyring)
-
-#else
-
-static long sys_keyctl(int cmd, ...)
-{
-	va_list args;
-	long int arg0, arg1, arg2, ret;
-
-	va_start(args, cmd);
-	arg0 = va_arg(args, long int);
-	arg1 = va_arg(args, long int);
-	arg2 = va_arg(args, long int);
-	ret = syscall(__NR_keyctl, cmd, arg0, arg1, arg2);
-	va_end(args);
-
-	return ret;
-}
-
-static key_serial_t sys_add_key(
-	const char *type,
-	const char *description,
-	const void *payload,
-	size_t plen,
-	key_serial_t keyring)
-{
-	return (key_serial_t)syscall(__NR_add_key, type, description, payload, plen, keyring);
-}
-
-#endif
-
-/*
- *  stress_key
- *	stress key operations
- */
-int stress_key(
-	uint64_t *const counter,
-	const uint32_t instance,
-	const uint64_t max_ops,
-	const char *name)
-{
-	(void)instance;
-	(void)name;
-	pid_t ppid = getppid();
-
-	key_serial_t keys[MAX_KEYS];
-
-	do {
-		size_t i, n = 0;
-		char description[64];
-		char payload[64];
-
-		/* Add as many keys as we are allowed */
-		for (n = 0; n < MAX_KEYS; n++) {
-			snprintf(description, sizeof(description),
-				"stress-ng-key-%u-%" PRIu32
-				"-%zu", ppid, instance, n);
-			snprintf(payload, sizeof(payload),
-				"somedata-%zu", n);
-
-			keys[n] = sys_add_key("user", description,
-				payload, strlen(payload),
-				KEY_SPEC_PROCESS_KEYRING);
-			if (keys[n] < 0) {
-				if ((errno != ENOMEM) && (errno != EDQUOT))
-					pr_failed_err(name, "add_key");
-				break;
-			}
-			if (sys_keyctl(KEYCTL_SET_TIMEOUT, keys[n], 1) < 0)
-				pr_failed_err(name, "keyctl KEYCTL_SET_TIMEOUT");
-		}
-
-		/* And manipulate the keys */
-		for (i = 0; i < n; i++) {
-			snprintf(description, sizeof(description),
-				"stress-ng-key-%u-%" PRIu32
-				"-%zu", ppid, instance, i);
-			if (sys_keyctl(KEYCTL_DESCRIBE, keys[i], description) < 0)
-				pr_failed_err(name, "keyctl KEYCTL_DESCRIBE");
-			if (!opt_do_run)
-				break;
-
-			snprintf(payload, sizeof(payload),
-				"somedata-%zu", n);
-			if (sys_keyctl(KEYCTL_UPDATE, keys[i],
-			    payload, strlen(payload)) < 0)
-				pr_failed_err(name, "keyctl KEYCTL_UPDATE");
-			if (!opt_do_run)
-				break;
-
-			memset(payload, 0, sizeof(payload));
-			if (sys_keyctl(KEYCTL_READ, keys[i],
-			    payload, sizeof(payload)) < 0)
-				pr_failed_err(name, "keyctl KEYCTL_READ");
-			if (!opt_do_run)
-				break;
-
-			(void)sys_keyctl(KEYCTL_CLEAR, keys[i]);
-			(void)sys_keyctl(KEYCTL_INVALIDATE, keys[i]);
-			(*counter)++;
-		}
-		/* If we hit too many errors and bailed out early, clean up */
-		while (i < n) {
-			(void)sys_keyctl(KEYCTL_CLEAR, keys[i]);
-			(void)sys_keyctl(KEYCTL_INVALIDATE, keys[i]);
-			i++;
-		}
-	} while (opt_do_run && (!max_ops || *counter < max_ops));
-
-	return EXIT_SUCCESS;
-}
-
-#endif
diff --git a/stress-ng.h b/stress-ng.h
index 99435f3..da3b8f8 100644
--- a/stress-ng.h
+++ b/stress-ng.h
@@ -737,10 +737,6 @@ typedef enum {
 	__STRESS_KCMP,
 #define STRESS_KCMP __STRESS_KCMP
 #endif
-#if defined(__linux__) && defined(__NR_add_key) && defined(__NR_keyctl)
-	__STRESS_KEY,
-#define STRESS_KEY __STRESS_KEY
-#endif
 	STRESS_KILL,
 #if defined(F_SETLEASE) && defined(F_WRLCK) && defined(F_UNLCK)
 	__STRESS_LEASE,
@@ -1790,7 +1786,6 @@ STRESS(stress_inotify);
 STRESS(stress_iosync);
 STRESS(stress_itimer);
 STRESS(stress_kcmp);
-STRESS(stress_key);
 STRESS(stress_kill);
 STRESS(stress_lease);
 STRESS(stress_link);
-- 
1.9.1

